
services:
  broker:
    build: ./data_broker
    ports: 
      - "3000:3000"

  simulator-a:
    build: ./eeg_acquisition
    environment:
      ACQ_PORT: "13854"
      PACKET_INTERVAL: "0.1"
    command: python simulator.py
    ports: 
      - "13854:13854"

  simulator-b:
    build: ./eeg_acquisition
    environment:
      ACQ_PORT: "13855"
      PACKET_INTERVAL: "0.1"
    command: python simulator.py
    ports:
      - "13855:13855"

  acquisition-a:
    build: ./eeg_acquisition
    environment:
      PLAYER_ID: "1"
      ACQ_PORT: "13854"
      BROKER_URL: "http://broker:3000"
      POOR_SIGNAL_LEVEL_THRESHOLD: "100"
      EEG_HOST: "simulator-a"
    command: python acquisition_service.py
    depends_on: 
      - broker
      - simulator-a

  acquisition-b:
    build: ./eeg_acquisition
    environment:
      PLAYER_ID: "2"
      ACQ_PORT: "13855"
      BROKER_URL: "http://broker:3000"
      POOR_SIGNAL_LEVEL_THRESHOLD: "100"
      EEG_HOST: "simulator-b"
    command: python acquisition_service.py
    depends_on: 
      - broker
      - simulator-b

  dashboard:
    # Constrói a imagem a partir do Dockerfile na pasta /dashboard
    build: ./dashboard
    # Mapeia a porta 8000 da sua máquina para a porta 80 do contêiner NGINX.
    # A porta 80 é a porta padrão que o NGINX usa para servir sites.
    ports:
      - "8000:80"
    # Garante que o dashboard só inicie depois que o broker estiver pronto,
    # evitando que o frontend carregue antes que a API esteja disponível.
    depends_on:
      - broker